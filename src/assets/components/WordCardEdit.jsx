import * as React from "react";
import Box from "@mui/material/Box";
import Card from "@mui/material/Card";
import CardActions from "@mui/material/CardActions";
import CardContent from "@mui/material/CardContent";
import SaveIcon from "@mui/icons-material/Save";
import DeleteIcon from "@mui/icons-material/Delete";
import DoneIcon from "@mui/icons-material/Done";
import ErrIcon from "@mui/icons-material/Error";
import IconButton from "@mui/material/IconButton";
import TextField from "@mui/material/TextField";
import Snackbar from "@mui/material/Snackbar";
import MuiAlert from "@mui/material/Alert";

import wordsContext from "./Context";

import { editableFields, emptyFieldMsg } from "../conf/Settings";
import Utilities from "../utilities/Utilities";
import Validation from "../../assets/utilities/Validation";
import "@fontsource/roboto/400.css";

// import getServices from "../../Api/getServices";
import postServices from "../../Api/postServices";

const sxMsgBox = {
  minWidth: 150,
  minHeight: 150,
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  fontSize: "1.2rem",
  fontFamily: "Roboto",
};

const sxCardContentBox = {
  "& .MuiTextField-root": { m: 0.2 },
  display: "flex",
  justifyContent: "space-between",
  alignItems: "stretch",
  flexDirection: "column",
};

const sxCard = {
  minWidth: 150,
  minHeight: 150,
  display: "flex",
  justifyContent: "space-between",
  flexDirection: "column",
};

const sxCardActions = { display: "flex", justifyContent: "space-between" };

// –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞
const Alert = React.forwardRef(function Alert(props, ref) {
  return <MuiAlert elevation={6} ref={ref} variant="filled" {...props} />;
});
const { vertical, horizontal } = { vertical: "top", horizontal: "center" };

export default function WordCardEdit(props) {
  const { wordCard } = props;

  // const { listOfWords, assignListOfWords } = React.useContext(WordsContext);
  let listOfWords = React.useContext(wordsContext);
  console.log("listOfWords");
  console.log(listOfWords);

  //   –≤–≤–æ–¥–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - 1="–∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", 2="–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π", 0="–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"( –ø–æ –¥–µ—Ñ–æ–ª—Ç—É = 0 )
  const [saved, setSaved] = React.useState(0);
  // –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∏–∫–æ–Ω–∫—É "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å" SaveIcon –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  const handleSaveClick = async (e) => {
    e.preventDefault(); // üëàÔ∏è prevent page refresh

    // –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π + —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –æ—à–∏–±–∫–∞–º–∏
    setInputErrorsState((prevState) => {
      for (let key in inputsState) {
        delete prevState[key];
        if (Validation.isEmpty(inputsState[key])) {
          prevState[key] = emptyFieldMsg;
        } else if (!Validation.isFormatCorrect(inputsState[key], key)) {
          prevState[key] = editableFields[key].regexpMsg;
        }
      }
      // –µ—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫ –≤ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π
      return { ...prevState };
    });

    if (Validation.isEmptyObj(inputErrorsState)) {
      //–Ω–µ—Ç –æ—à–∏–±–æ–∫ –≤ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π => –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
      const updList = await postServices.updWordCard(inputsState);

      if (updList.error) {
        setSaved(2);
      } else {
        listOfWords = [
          ...Utilities.UpdateArrayElem(listOfWords, wordCard, inputsState),
        ];
        setSaved(1);
      }
    }
  };

  const handleCloseError = (event, reason) => {
    if (reason === "clickaway") {
      return;
    }
    setSaved(0);
  };

  // –≤–≤–æ–¥–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–∫–∞—Ä—Ç–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞"
  // —Å–¥–µ–ª–∞—Ç—å "–Ω–µ —É–¥–∞–ª–µ–Ω–∞", "—É–¥–∞–ª–µ–Ω–∞" –∏ "–æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏"
  const [isDeleted, setDeleted] = React.useState(false);
  // —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —É–¥–∞–ª–µ–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ DeleteIcon
  const handleDeleteClick = () => {
    // –∑–¥–µ—Å—å –¥–µ—Ä–Ω—É—Ç—å –∞–ø–∏ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    setDeleted(true);
    // –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞
    listOfWords = [...Utilities.DelElemFromArray(listOfWords, wordCard)];
  };

  // —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª–µ–π

  const [inputsState, setInputsState] = React.useState({
    [editableFields.english.id]: wordCard.english,
    [editableFields.transcription.id]: wordCard.transcription,
    [editableFields.russian.id]: wordCard.russian,
    [editableFields.tags.id]: wordCard.tags,
    id: wordCard.id,
  });

  // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª—è—Ö, —Å–Ω–∞—á–∞–ª–∞ –∏—Ö –Ω–µ—Ç
  const [inputErrorsState, setInputErrorsState] = React.useState({});

  const handleInputChange = (e) => {
    const id = e.target.id;
    const val = e.target.value;

    setInputsState((prevState) => {
      prevState[id] = val;
      return { ...prevState };
    });
  };

  return (
    <Card
      sx={sxCard}
      component="form"
      name="word-card"
      onSubmit={handleSaveClick}
    >
      {isDeleted ? (
        <Box sx={sxMsgBox}>Card has been removed</Box>
      ) : (
        <CardContent>
          <Box sx={sxCardContentBox} autoComplete="off">
            {/* <TextField id={"id"} value={wordCard.id} sx={{ display: "none" }} /> */}
            <TextField
              disabled={saved === 2 || saved === 1}
              label={editableFields.english.label}
              id={editableFields.english.id}
              helperText={inputErrorsState[editableFields.english.id]}
              onChange={handleInputChange}
              value={inputsState[editableFields.english.id]}
              error={inputErrorsState[editableFields.english.id] ? true : false}
              variant="filled"
              size="small"
            />
            <TextField
              disabled={saved === 2 || saved === 1}
              label={editableFields.transcription.label}
              id={editableFields.transcription.id}
              onChange={handleInputChange}
              value={inputsState[editableFields.transcription.id]}
              error={
                inputErrorsState[editableFields.transcription.id] ? true : false
              }
              helperText={inputErrorsState[editableFields.transcription.id]}
              variant="filled"
              size="small"
            />
            <TextField
              disabled={saved === 2 || saved === 1}
              label={editableFields.russian.label}
              id={editableFields.russian.id}
              onChange={handleInputChange}
              value={inputsState[editableFields.russian.id]}
              error={inputErrorsState[editableFields.russian.id] ? true : false}
              helperText={inputErrorsState[editableFields.russian.id]}
              variant="filled"
              size="small"
            />
            <TextField
              disabled={saved === 2 || saved === 1}
              label={editableFields.tags.label}
              id={editableFields.tags.id}
              helperText={inputErrorsState[editableFields.tags.id]}
              onChange={handleInputChange}
              value={inputsState[editableFields.tags.id]}
              error={inputErrorsState[editableFields.tags.id] ? true : false}
              variant="filled"
              size="small"
            />
          </Box>
        </CardContent>
      )}
      {!isDeleted && (
        <CardActions sx={sxCardActions}>
          {saved === 1 ? (
            <DoneIcon />
          ) : saved === 2 ? (
            <React.Fragment>
              <Snackbar
                open={saved === 2}
                autoHideDuration={6000}
                onClose={handleCloseError}
                anchorOrigin={{ vertical, horizontal }}
                key={vertical + horizontal}
              >
                <Alert
                  onClose={handleCloseError}
                  severity="error"
                  sx={{ width: "100%" }}
                >
                  Network problem, try again later!
                </Alert>
              </Snackbar>

              <ErrIcon />
            </React.Fragment>
          ) : (
            // –∫–Ω–æ–ø–∫–∞ - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            <IconButton aria-label="save" type="submit">
              <SaveIcon />
            </IconButton>
          )}

          <IconButton aria-label="delete" onClick={handleDeleteClick}>
            <DeleteIcon />
          </IconButton>
        </CardActions>
      )}
    </Card>
  );
}
