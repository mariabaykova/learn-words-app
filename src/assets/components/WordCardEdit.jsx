import * as React from "react";
import Box from "@mui/material/Box";
import Card from "@mui/material/Card";
import CardActions from "@mui/material/CardActions";
import CardContent from "@mui/material/CardContent";
import SaveIcon from "@mui/icons-material/Save";
import DeleteIcon from "@mui/icons-material/Delete";
import DoneIcon from "@mui/icons-material/Done";
import IconButton from "@mui/material/IconButton";
import TextField from "@mui/material/TextField";
import { editableFields, emptyFieldMsg } from "../conf/Settings";
import Validation from "../../assets/utilities/Validation";
import "@fontsource/roboto/400.css";

const sxMsgBox = {
  minWidth: 150,
  minHeight: 150,
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  fontSize: "1.2rem",
  fontFamily: "Roboto",
};

const sxCardContentBox = {
  "& .MuiTextField-root": { m: 0.2 },
  display: "flex",
  justifyContent: "space-between",
  alignItems: "stretch",
  flexDirection: "column",
};

const sxCard = {
  minWidth: 150,
  minHeight: 150,
  display: "flex",
  justifyContent: "space-between",
  flexDirection: "column",
};

const sxCardActions = { display: "flex", justifyContent: "space-between" };

export default function WordCardEdit(props) {
  const { wordCard, onLiftDelCardId } = props;
  //   –≤–≤–æ–¥–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - "–∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
  const [saved, setSaved] = React.useState(false);
  // –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∏–∫–æ–Ω–∫—É "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å" SaveIcon
  const handleSaveClick = (e) => {
    e.preventDefault(); // üëàÔ∏è prevent page refresh

    // –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π + —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –æ—à–∏–±–∫–∞–º–∏
    setInputErrorsState((prevState) => {
      let errInd = 0;
      for (let key in prevState) {
        prevState[key] = "";
        if (Validation.isEmpty(inputsState[key])) {
          prevState[key] = emptyFieldMsg;
          errInd++;
        } else if (!Validation.isFormatCorrect(inputsState[key], key)) {
          prevState[key] = editableFields[key].regexpMsg;
          errInd++;
        }
      }
      if (!errInd) {
        setSaved((prevState) => !prevState);
      }

      return { ...prevState };
    });
  };

  // –≤–≤–æ–¥–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–∫–∞—Ä—Ç–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞"
  const [isDeleted, setDeleted] = React.useState(false);
  // —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —É–¥–∞–ª–µ–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ DeleteIcon
  const handleDeleteClick = () => {
    setDeleted(true);
    onLiftDelCardId(wordCard.id);
  };

  // —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª–µ–π

  const [inputsState, setInputsState] = React.useState({
    [editableFields.englishWord.id]: wordCard.english,
    [editableFields.transcription.id]: wordCard.transcription,
    [editableFields.russianWord.id]: wordCard.russian,
  });

  // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª—è—Ö, —Å–Ω–∞—á–∞–ª–∞ –∏—Ö –Ω–µ—Ç
  const [inputErrorsState, setInputErrorsState] = React.useState({
    [editableFields.englishWord.id]: "",
    [editableFields.transcription.id]: "",
    [editableFields.russianWord.id]: "",
  });

  const handleInputChange = (e) => {
    const id = e.target.id;
    const val = e.target.value;

    setInputsState((prevState) => {
      prevState[id] = val;
      return { ...prevState };
    });
  };

  return (
    <Card sx={sxCard} component="form" onSubmit={handleSaveClick}>
      {isDeleted ? (
        <Box sx={sxMsgBox}>Card has been removed</Box>
      ) : (
        <CardContent>
          <Box sx={sxCardContentBox} autoComplete="off">
            <TextField
              label={editableFields.englishWord.label}
              variant={editableFields.englishWord.variant}
              id={editableFields.englishWord.id}
              size={editableFields.englishWord.size}
              onChange={handleInputChange}
              value={inputsState.englishWord}
              error={Boolean(inputErrorsState.englishWord.length)}
              helperText={inputErrorsState.englishWord}
            />
            <TextField
              label={editableFields.transcription.label}
              variant={editableFields.transcription.variant}
              id={editableFields.transcription.id}
              size={editableFields.transcription.size}
              onChange={handleInputChange}
              value={inputsState.transcription}
              error={Boolean(inputErrorsState.transcription.length)}
              helperText={inputErrorsState.transcription}
            />
            <TextField
              label={editableFields.russianWord.label}
              variant={editableFields.russianWord.variant}
              id={editableFields.russianWord.id}
              size={editableFields.russianWord.size}
              onChange={handleInputChange}
              value={inputsState.russianWord}
              error={Boolean(inputErrorsState.russianWord.length)}
              helperText={inputErrorsState.russianWord}
            />
          </Box>
        </CardContent>
      )}
      {!isDeleted && (
        <CardActions sx={sxCardActions}>
          {saved ? (
            <DoneIcon />
          ) : (
            // –∫–Ω–æ–ø–∫–∞ - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            <IconButton aria-label="save" type="submit">
              <SaveIcon />
            </IconButton>
          )}

          <IconButton aria-label="delete" onClick={handleDeleteClick}>
            <DeleteIcon />
          </IconButton>
        </CardActions>
      )}
    </Card>
  );
}
